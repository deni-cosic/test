/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FormSubmission as PrismaFormSubmission,
  Patient as PrismaPatient,
  Practice as PrismaPractice,
} from "@prisma/client";

export class FormSubmissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FormSubmissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.formSubmission.count(args);
  }

  async formSubmissions(
    args: Prisma.FormSubmissionFindManyArgs
  ): Promise<PrismaFormSubmission[]> {
    return this.prisma.formSubmission.findMany(args);
  }
  async formSubmission(
    args: Prisma.FormSubmissionFindUniqueArgs
  ): Promise<PrismaFormSubmission | null> {
    return this.prisma.formSubmission.findUnique(args);
  }
  async createFormSubmission(
    args: Prisma.FormSubmissionCreateArgs
  ): Promise<PrismaFormSubmission> {
    return this.prisma.formSubmission.create(args);
  }
  async updateFormSubmission(
    args: Prisma.FormSubmissionUpdateArgs
  ): Promise<PrismaFormSubmission> {
    return this.prisma.formSubmission.update(args);
  }
  async deleteFormSubmission(
    args: Prisma.FormSubmissionDeleteArgs
  ): Promise<PrismaFormSubmission> {
    return this.prisma.formSubmission.delete(args);
  }

  async getPatient(parentId: string): Promise<PrismaPatient | null> {
    return this.prisma.formSubmission
      .findUnique({
        where: { id: parentId },
      })
      .patient();
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.formSubmission
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

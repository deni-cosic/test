/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PracticeInfoLinkService } from "../practiceInfoLink.service";
import { PracticeInfoLinkCreateInput } from "./PracticeInfoLinkCreateInput";
import { PracticeInfoLink } from "./PracticeInfoLink";
import { PracticeInfoLinkFindManyArgs } from "./PracticeInfoLinkFindManyArgs";
import { PracticeInfoLinkWhereUniqueInput } from "./PracticeInfoLinkWhereUniqueInput";
import { PracticeInfoLinkUpdateInput } from "./PracticeInfoLinkUpdateInput";

export class PracticeInfoLinkControllerBase {
  constructor(protected readonly service: PracticeInfoLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PracticeInfoLink })
  @swagger.ApiBody({
    type: PracticeInfoLinkCreateInput,
  })
  async createPracticeInfoLink(
    @common.Body() data: PracticeInfoLinkCreateInput
  ): Promise<PracticeInfoLink> {
    return await this.service.createPracticeInfoLink({
      data: {
        ...data,

        practice: data.practice
          ? {
              connect: data.practice,
            }
          : undefined,
      },
      select: {
        category: true,
        createdAt: true,
        displayName: true,
        id: true,
        message: true,

        practice: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PracticeInfoLink] })
  @ApiNestedQuery(PracticeInfoLinkFindManyArgs)
  async practiceInfoLinks(
    @common.Req() request: Request
  ): Promise<PracticeInfoLink[]> {
    const args = plainToClass(PracticeInfoLinkFindManyArgs, request.query);
    return this.service.practiceInfoLinks({
      ...args,
      select: {
        category: true,
        createdAt: true,
        displayName: true,
        id: true,
        message: true,

        practice: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PracticeInfoLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async practiceInfoLink(
    @common.Param() params: PracticeInfoLinkWhereUniqueInput
  ): Promise<PracticeInfoLink | null> {
    const result = await this.service.practiceInfoLink({
      where: params,
      select: {
        category: true,
        createdAt: true,
        displayName: true,
        id: true,
        message: true,

        practice: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PracticeInfoLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: PracticeInfoLinkUpdateInput,
  })
  async updatePracticeInfoLink(
    @common.Param() params: PracticeInfoLinkWhereUniqueInput,
    @common.Body() data: PracticeInfoLinkUpdateInput
  ): Promise<PracticeInfoLink | null> {
    try {
      return await this.service.updatePracticeInfoLink({
        where: params,
        data: {
          ...data,

          practice: data.practice
            ? {
                connect: data.practice,
              }
            : undefined,
        },
        select: {
          category: true,
          createdAt: true,
          displayName: true,
          id: true,
          message: true,

          practice: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PracticeInfoLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePracticeInfoLink(
    @common.Param() params: PracticeInfoLinkWhereUniqueInput
  ): Promise<PracticeInfoLink | null> {
    try {
      return await this.service.deletePracticeInfoLink({
        where: params,
        select: {
          category: true,
          createdAt: true,
          displayName: true,
          id: true,
          message: true,

          practice: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FeaturePermission as PrismaFeaturePermission,
  Practice as PrismaPractice,
} from "@prisma/client";

export class FeaturePermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeaturePermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.featurePermission.count(args);
  }

  async featurePermissions(
    args: Prisma.FeaturePermissionFindManyArgs
  ): Promise<PrismaFeaturePermission[]> {
    return this.prisma.featurePermission.findMany(args);
  }
  async featurePermission(
    args: Prisma.FeaturePermissionFindUniqueArgs
  ): Promise<PrismaFeaturePermission | null> {
    return this.prisma.featurePermission.findUnique(args);
  }
  async createFeaturePermission(
    args: Prisma.FeaturePermissionCreateArgs
  ): Promise<PrismaFeaturePermission> {
    return this.prisma.featurePermission.create(args);
  }
  async updateFeaturePermission(
    args: Prisma.FeaturePermissionUpdateArgs
  ): Promise<PrismaFeaturePermission> {
    return this.prisma.featurePermission.update(args);
  }
  async deleteFeaturePermission(
    args: Prisma.FeaturePermissionDeleteArgs
  ): Promise<PrismaFeaturePermission> {
    return this.prisma.featurePermission.delete(args);
  }

  async findPractices(
    parentId: string,
    args: Prisma.PracticeFindManyArgs
  ): Promise<PrismaPractice[]> {
    return this.prisma.featurePermission
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .practices(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkflowTemplateStepService } from "../workflowTemplateStep.service";
import { WorkflowTemplateStepCreateInput } from "./WorkflowTemplateStepCreateInput";
import { WorkflowTemplateStep } from "./WorkflowTemplateStep";
import { WorkflowTemplateStepFindManyArgs } from "./WorkflowTemplateStepFindManyArgs";
import { WorkflowTemplateStepWhereUniqueInput } from "./WorkflowTemplateStepWhereUniqueInput";
import { WorkflowTemplateStepUpdateInput } from "./WorkflowTemplateStepUpdateInput";

export class WorkflowTemplateStepControllerBase {
  constructor(protected readonly service: WorkflowTemplateStepService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkflowTemplateStep })
  @swagger.ApiBody({
    type: WorkflowTemplateStepCreateInput,
  })
  async createWorkflowTemplateStep(
    @common.Body() data: WorkflowTemplateStepCreateInput
  ): Promise<WorkflowTemplateStep> {
    return await this.service.createWorkflowTemplateStep({
      data: {
        ...data,

        workflowTemplate: {
          connect: data.workflowTemplate,
        },
      },
      select: {
        createdAt: true,
        id: true,
        message: true,
        timeOffsetInSeconds: true,
        updatedAt: true,

        workflowTemplate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkflowTemplateStep] })
  @ApiNestedQuery(WorkflowTemplateStepFindManyArgs)
  async workflowTemplateSteps(
    @common.Req() request: Request
  ): Promise<WorkflowTemplateStep[]> {
    const args = plainToClass(WorkflowTemplateStepFindManyArgs, request.query);
    return this.service.workflowTemplateSteps({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timeOffsetInSeconds: true,
        updatedAt: true,

        workflowTemplate: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkflowTemplateStep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workflowTemplateStep(
    @common.Param() params: WorkflowTemplateStepWhereUniqueInput
  ): Promise<WorkflowTemplateStep | null> {
    const result = await this.service.workflowTemplateStep({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timeOffsetInSeconds: true,
        updatedAt: true,

        workflowTemplate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkflowTemplateStep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: WorkflowTemplateStepUpdateInput,
  })
  async updateWorkflowTemplateStep(
    @common.Param() params: WorkflowTemplateStepWhereUniqueInput,
    @common.Body() data: WorkflowTemplateStepUpdateInput
  ): Promise<WorkflowTemplateStep | null> {
    try {
      return await this.service.updateWorkflowTemplateStep({
        where: params,
        data: {
          ...data,

          workflowTemplate: {
            connect: data.workflowTemplate,
          },
        },
        select: {
          createdAt: true,
          id: true,
          message: true,
          timeOffsetInSeconds: true,
          updatedAt: true,

          workflowTemplate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkflowTemplateStep })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkflowTemplateStep(
    @common.Param() params: WorkflowTemplateStepWhereUniqueInput
  ): Promise<WorkflowTemplateStep | null> {
    try {
      return await this.service.deleteWorkflowTemplateStep({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          timeOffsetInSeconds: true,
          updatedAt: true,

          workflowTemplate: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

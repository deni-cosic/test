/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WorkflowTemplateService } from "../workflowTemplate.service";
import { WorkflowTemplateCreateInput } from "./WorkflowTemplateCreateInput";
import { WorkflowTemplate } from "./WorkflowTemplate";
import { WorkflowTemplateFindManyArgs } from "./WorkflowTemplateFindManyArgs";
import { WorkflowTemplateWhereUniqueInput } from "./WorkflowTemplateWhereUniqueInput";
import { WorkflowTemplateUpdateInput } from "./WorkflowTemplateUpdateInput";
import { WorkflowTemplateStepFindManyArgs } from "../../workflowTemplateStep/base/WorkflowTemplateStepFindManyArgs";
import { WorkflowTemplateStep } from "../../workflowTemplateStep/base/WorkflowTemplateStep";
import { WorkflowTemplateStepWhereUniqueInput } from "../../workflowTemplateStep/base/WorkflowTemplateStepWhereUniqueInput";

export class WorkflowTemplateControllerBase {
  constructor(protected readonly service: WorkflowTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkflowTemplate })
  @swagger.ApiBody({
    type: WorkflowTemplateCreateInput,
  })
  async createWorkflowTemplate(
    @common.Body() data: WorkflowTemplateCreateInput
  ): Promise<WorkflowTemplate> {
    return await this.service.createWorkflowTemplate({
      data: {
        ...data,

        practice: data.practice
          ? {
              connect: data.practice,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,

        practice: {
          select: {
            id: true,
          },
        },

        sector: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkflowTemplate] })
  @ApiNestedQuery(WorkflowTemplateFindManyArgs)
  async workflowTemplates(
    @common.Req() request: Request
  ): Promise<WorkflowTemplate[]> {
    const args = plainToClass(WorkflowTemplateFindManyArgs, request.query);
    return this.service.workflowTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,

        practice: {
          select: {
            id: true,
          },
        },

        sector: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkflowTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async workflowTemplate(
    @common.Param() params: WorkflowTemplateWhereUniqueInput
  ): Promise<WorkflowTemplate | null> {
    const result = await this.service.workflowTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,

        practice: {
          select: {
            id: true,
          },
        },

        sector: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkflowTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: WorkflowTemplateUpdateInput,
  })
  async updateWorkflowTemplate(
    @common.Param() params: WorkflowTemplateWhereUniqueInput,
    @common.Body() data: WorkflowTemplateUpdateInput
  ): Promise<WorkflowTemplate | null> {
    try {
      return await this.service.updateWorkflowTemplate({
        where: params,
        data: {
          ...data,

          practice: data.practice
            ? {
                connect: data.practice,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,

          practice: {
            select: {
              id: true,
            },
          },

          sector: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkflowTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWorkflowTemplate(
    @common.Param() params: WorkflowTemplateWhereUniqueInput
  ): Promise<WorkflowTemplate | null> {
    try {
      return await this.service.deleteWorkflowTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,

          practice: {
            select: {
              id: true,
            },
          },

          sector: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/steps")
  @ApiNestedQuery(WorkflowTemplateStepFindManyArgs)
  async findSteps(
    @common.Req() request: Request,
    @common.Param() params: WorkflowTemplateWhereUniqueInput
  ): Promise<WorkflowTemplateStep[]> {
    const query = plainToClass(WorkflowTemplateStepFindManyArgs, request.query);
    const results = await this.service.findSteps(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        message: true,
        timeOffsetInSeconds: true,
        updatedAt: true,

        workflowTemplate: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/steps")
  async connectSteps(
    @common.Param() params: WorkflowTemplateWhereUniqueInput,
    @common.Body() body: WorkflowTemplateStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      steps: {
        connect: body,
      },
    };
    await this.service.updateWorkflowTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/steps")
  async updateSteps(
    @common.Param() params: WorkflowTemplateWhereUniqueInput,
    @common.Body() body: WorkflowTemplateStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      steps: {
        set: body,
      },
    };
    await this.service.updateWorkflowTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/steps")
  async disconnectSteps(
    @common.Param() params: WorkflowTemplateWhereUniqueInput,
    @common.Body() body: WorkflowTemplateStepWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      steps: {
        disconnect: body,
      },
    };
    await this.service.updateWorkflowTemplate({
      where: params,
      data,
      select: { id: true },
    });
  }
}

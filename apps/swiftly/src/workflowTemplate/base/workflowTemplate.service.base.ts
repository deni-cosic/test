/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkflowTemplate as PrismaWorkflowTemplate,
  WorkflowTemplateStep as PrismaWorkflowTemplateStep,
  Practice as PrismaPractice,
} from "@prisma/client";

export class WorkflowTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkflowTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workflowTemplate.count(args);
  }

  async workflowTemplates(
    args: Prisma.WorkflowTemplateFindManyArgs
  ): Promise<PrismaWorkflowTemplate[]> {
    return this.prisma.workflowTemplate.findMany(args);
  }
  async workflowTemplate(
    args: Prisma.WorkflowTemplateFindUniqueArgs
  ): Promise<PrismaWorkflowTemplate | null> {
    return this.prisma.workflowTemplate.findUnique(args);
  }
  async createWorkflowTemplate(
    args: Prisma.WorkflowTemplateCreateArgs
  ): Promise<PrismaWorkflowTemplate> {
    return this.prisma.workflowTemplate.create(args);
  }
  async updateWorkflowTemplate(
    args: Prisma.WorkflowTemplateUpdateArgs
  ): Promise<PrismaWorkflowTemplate> {
    return this.prisma.workflowTemplate.update(args);
  }
  async deleteWorkflowTemplate(
    args: Prisma.WorkflowTemplateDeleteArgs
  ): Promise<PrismaWorkflowTemplate> {
    return this.prisma.workflowTemplate.delete(args);
  }

  async findSteps(
    parentId: string,
    args: Prisma.WorkflowTemplateStepFindManyArgs
  ): Promise<PrismaWorkflowTemplateStep[]> {
    return this.prisma.workflowTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .steps(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.workflowTemplate
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

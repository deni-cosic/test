/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MessageService } from "../message.service";
import { MessageCreateInput } from "./MessageCreateInput";
import { Message } from "./Message";
import { MessageFindManyArgs } from "./MessageFindManyArgs";
import { MessageWhereUniqueInput } from "./MessageWhereUniqueInput";
import { MessageUpdateInput } from "./MessageUpdateInput";
import { MessageLogFindManyArgs } from "../../messageLog/base/MessageLogFindManyArgs";
import { MessageLog } from "../../messageLog/base/MessageLog";
import { MessageLogWhereUniqueInput } from "../../messageLog/base/MessageLogWhereUniqueInput";

export class MessageControllerBase {
  constructor(protected readonly service: MessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Message })
  @swagger.ApiBody({
    type: MessageCreateInput,
  })
  async createMessage(
    @common.Body() data: MessageCreateInput
  ): Promise<Message> {
    return await this.service.createMessage({
      data: {
        ...data,

        patient: {
          connect: data.patient,
        },

        practice: {
          connect: data.practice,
        },

        sentBy: data.sentBy
          ? {
              connect: data.sentBy,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,
        messageType: true,

        patient: {
          select: {
            id: true,
          },
        },

        practice: {
          select: {
            id: true,
          },
        },

        provider: true,
        providerId: true,
        queueItemId: true,

        sentBy: {
          select: {
            id: true,
          },
        },

        sentOn: true,
        smsCount: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Message] })
  @ApiNestedQuery(MessageFindManyArgs)
  async messages(@common.Req() request: Request): Promise<Message[]> {
    const args = plainToClass(MessageFindManyArgs, request.query);
    return this.service.messages({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        messageType: true,

        patient: {
          select: {
            id: true,
          },
        },

        practice: {
          select: {
            id: true,
          },
        },

        provider: true,
        providerId: true,
        queueItemId: true,

        sentBy: {
          select: {
            id: true,
          },
        },

        sentOn: true,
        smsCount: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Message })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async message(
    @common.Param() params: MessageWhereUniqueInput
  ): Promise<Message | null> {
    const result = await this.service.message({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        messageType: true,

        patient: {
          select: {
            id: true,
          },
        },

        practice: {
          select: {
            id: true,
          },
        },

        provider: true,
        providerId: true,
        queueItemId: true,

        sentBy: {
          select: {
            id: true,
          },
        },

        sentOn: true,
        smsCount: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Message })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: MessageUpdateInput,
  })
  async updateMessage(
    @common.Param() params: MessageWhereUniqueInput,
    @common.Body() data: MessageUpdateInput
  ): Promise<Message | null> {
    try {
      return await this.service.updateMessage({
        where: params,
        data: {
          ...data,

          patient: {
            connect: data.patient,
          },

          practice: {
            connect: data.practice,
          },

          sentBy: data.sentBy
            ? {
                connect: data.sentBy,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,
          messageType: true,

          patient: {
            select: {
              id: true,
            },
          },

          practice: {
            select: {
              id: true,
            },
          },

          provider: true,
          providerId: true,
          queueItemId: true,

          sentBy: {
            select: {
              id: true,
            },
          },

          sentOn: true,
          smsCount: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Message })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMessage(
    @common.Param() params: MessageWhereUniqueInput
  ): Promise<Message | null> {
    try {
      return await this.service.deleteMessage({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          messageType: true,

          patient: {
            select: {
              id: true,
            },
          },

          practice: {
            select: {
              id: true,
            },
          },

          provider: true,
          providerId: true,
          queueItemId: true,

          sentBy: {
            select: {
              id: true,
            },
          },

          sentOn: true,
          smsCount: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/messageLog")
  @ApiNestedQuery(MessageLogFindManyArgs)
  async findMessageLog(
    @common.Req() request: Request,
    @common.Param() params: MessageWhereUniqueInput
  ): Promise<MessageLog[]> {
    const query = plainToClass(MessageLogFindManyArgs, request.query);
    const results = await this.service.findMessageLog(params.id, {
      ...query,
      select: {
        content: true,
        id: true,

        message: {
          select: {
            id: true,
          },
        },

        mobileNumber: true,
        senderId: true,
        sentOn: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/messageLog")
  async connectMessageLog(
    @common.Param() params: MessageWhereUniqueInput,
    @common.Body() body: MessageLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messageLog: {
        connect: body,
      },
    };
    await this.service.updateMessage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/messageLog")
  async updateMessageLog(
    @common.Param() params: MessageWhereUniqueInput,
    @common.Body() body: MessageLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messageLog: {
        set: body,
      },
    };
    await this.service.updateMessage({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/messageLog")
  async disconnectMessageLog(
    @common.Param() params: MessageWhereUniqueInput,
    @common.Body() body: MessageLogWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messageLog: {
        disconnect: body,
      },
    };
    await this.service.updateMessage({
      where: params,
      data,
      select: { id: true },
    });
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FormLinkService } from "../formLink.service";
import { FormLinkCreateInput } from "./FormLinkCreateInput";
import { FormLink } from "./FormLink";
import { FormLinkFindManyArgs } from "./FormLinkFindManyArgs";
import { FormLinkWhereUniqueInput } from "./FormLinkWhereUniqueInput";
import { FormLinkUpdateInput } from "./FormLinkUpdateInput";

export class FormLinkControllerBase {
  constructor(protected readonly service: FormLinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FormLink })
  @swagger.ApiBody({
    type: FormLinkCreateInput,
  })
  async createFormLink(
    @common.Body() data: FormLinkCreateInput
  ): Promise<FormLink> {
    return await this.service.createFormLink({
      data: {
        ...data,

        practice: data.practice
          ? {
              connect: data.practice,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        displayName: true,
        enabled: true,
        id: true,
        message: true,

        practice: {
          select: {
            id: true,
          },
        },

        sector: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FormLink] })
  @ApiNestedQuery(FormLinkFindManyArgs)
  async formLinks(@common.Req() request: Request): Promise<FormLink[]> {
    const args = plainToClass(FormLinkFindManyArgs, request.query);
    return this.service.formLinks({
      ...args,
      select: {
        createdAt: true,
        displayName: true,
        enabled: true,
        id: true,
        message: true,

        practice: {
          select: {
            id: true,
          },
        },

        sector: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FormLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async formLink(
    @common.Param() params: FormLinkWhereUniqueInput
  ): Promise<FormLink | null> {
    const result = await this.service.formLink({
      where: params,
      select: {
        createdAt: true,
        displayName: true,
        enabled: true,
        id: true,
        message: true,

        practice: {
          select: {
            id: true,
          },
        },

        sector: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FormLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: FormLinkUpdateInput,
  })
  async updateFormLink(
    @common.Param() params: FormLinkWhereUniqueInput,
    @common.Body() data: FormLinkUpdateInput
  ): Promise<FormLink | null> {
    try {
      return await this.service.updateFormLink({
        where: params,
        data: {
          ...data,

          practice: data.practice
            ? {
                connect: data.practice,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          displayName: true,
          enabled: true,
          id: true,
          message: true,

          practice: {
            select: {
              id: true,
            },
          },

          sector: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FormLink })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFormLink(
    @common.Param() params: FormLinkWhereUniqueInput
  ): Promise<FormLink | null> {
    try {
      return await this.service.deleteFormLink({
        where: params,
        select: {
          createdAt: true,
          displayName: true,
          enabled: true,
          id: true,
          message: true,

          practice: {
            select: {
              id: true,
            },
          },

          sector: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

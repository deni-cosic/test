/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FormLink as PrismaFormLink,
  Practice as PrismaPractice,
} from "@prisma/client";

export class FormLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FormLinkCountArgs, "select">): Promise<number> {
    return this.prisma.formLink.count(args);
  }

  async formLinks(
    args: Prisma.FormLinkFindManyArgs
  ): Promise<PrismaFormLink[]> {
    return this.prisma.formLink.findMany(args);
  }
  async formLink(
    args: Prisma.FormLinkFindUniqueArgs
  ): Promise<PrismaFormLink | null> {
    return this.prisma.formLink.findUnique(args);
  }
  async createFormLink(
    args: Prisma.FormLinkCreateArgs
  ): Promise<PrismaFormLink> {
    return this.prisma.formLink.create(args);
  }
  async updateFormLink(
    args: Prisma.FormLinkUpdateArgs
  ): Promise<PrismaFormLink> {
    return this.prisma.formLink.update(args);
  }
  async deleteFormLink(
    args: Prisma.FormLinkDeleteArgs
  ): Promise<PrismaFormLink> {
    return this.prisma.formLink.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.formLink
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

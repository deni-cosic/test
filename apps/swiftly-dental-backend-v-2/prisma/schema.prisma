datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  blocked   Boolean?
  confirmed Boolean?
  createdAt DateTime   @default(now())
  email     String?    @unique
  id        String     @id @default(uuid())
  name      String?
  password  String
  practices Practice[]
  provider  String?
  roles     Json
  updatedAt DateTime   @updatedAt
  username  String     @unique

  @@map("users")
}

model FeaturePermission {
  analytics           Boolean
  createdAt           DateTime   @default(now())
  dentalAdviceLink    Boolean
  dentalSubscriptions Boolean
  form                Boolean
  id                  String     @id @default(uuid())
  leads               Boolean?
  messageTemplate     Boolean
  practiceInfoLink    Boolean
  practices           Practice[]
  requestFeedback     Boolean
  requestPayment      Boolean
  sendDocument        Boolean
  sendMessageToMany   Boolean?
  updatedAt           DateTime   @updatedAt
  videoCall           Boolean
  workflows           Boolean?

  @@map("feature_permissions")
}

model FormLink {
  createdAt   DateTime           @default(now())
  displayName String
  enabled     Boolean
  id          String             @id @default(uuid())
  message     String
  sector      EnumFormLinkSector
  updatedAt   DateTime           @updatedAt
  url         String

  @@map("form_links")
}

model FormSubmission {
  createdAt     DateTime  @default(now())
  formId        String?
  formTitle     String
  id            String    @id @default(uuid())
  patient       Patient?  @relation(fields: [patientId], references: [id])
  patientId     String?
  practice      Practice  @relation(fields: [practiceId], references: [id])
  practiceId    String
  receivedAt    DateTime?
  requestedBy   String?
  requestSentId String?
  seen          Boolean?
  submissionId  String?
  updatedAt     DateTime  @updatedAt

  @@index([submissionId], map: "submissionId_1")
  @@map("form_submissions")
}

model HelpLink {
  category    String
  createdAt   DateTime @default(now())
  displayName String
  id          String   @id @default(uuid())
  updatedAt   DateTime @updatedAt
  url         String

  @@map("help_links")
}

model LeadFormLink {
  createdAt DateTime               @default(now())
  id        String                 @id @default(uuid())
  name      String
  sector    EnumLeadFormLinkSector
  updatedAt DateTime               @updatedAt
  url       String

  @@map("lead_form_links")
}

model Lead {
  contacted              Boolean
  convertedClientId      String?
  createdAt              DateTime  @default(now())
  dateOfBirth            DateTime
  email                  String
  emailConsented         Boolean?
  firstName              String
  id                     String    @id @default(uuid())
  interests              Json
  lastName               String
  marketingConsented     Boolean
  meetingDate            DateTime?
  mobileNumber           String
  onlyInterestsConsented Boolean?
  otherFields            Json?
  platformSource         String
  practice               Practice  @relation(fields: [practiceId], references: [id])
  practiceId             String
  updatedAt              DateTime  @updatedAt

  @@map("leads")
}

model Link {
  category    EnumLinkCategory?
  createdAt   DateTime          @default(now())
  displayName String
  enabled     Boolean
  id          String            @id @default(uuid())
  sector      EnumLinkSector
  updatedAt   DateTime          @updatedAt
  url         String

  @@map("links")
}

model Patient {
  createdAt        DateTime         @default(now())
  dateOfBirth      DateTime
  firstName        String
  formSubmissions  FormSubmission[]
  id               String           @id @default(uuid())
  lastName         String
  mobileNumber     String
  nhsNumber        String?
  practice         Practice?        @relation(fields: [practiceId], references: [id])
  practiceId       String?
  stripeCustomerId String?
  updatedAt        DateTime         @updatedAt
  workflows        Workflow[]

  @@unique([practiceId, firstName, lastName, dateOfBirth])
  @@map("patients")
}

model PracticeInfoLink {
  category    String
  createdAt   DateTime  @default(now())
  displayName String
  id          String    @id @default(uuid())
  message     String?
  practice    Practice? @relation(fields: [practiceId], references: [id])
  practiceId  String?
  updatedAt   DateTime  @updatedAt
  url         String?

  @@map("practice_info_links")
}

model Practice {
  addressLine1             String?
  addressLine2             String?
  addressLine3             String?
  createdAt                DateTime           @default(now())
  featurePermission        FeaturePermission? @relation(fields: [featurePermissionId], references: [id])
  featurePermissionId      String?
  formSubmissions          FormSubmission[]
  googlePlaceId            String?
  id                       String             @id @default(uuid())
  leads                    Lead[]
  name                     String
  nhsReviewUrl             String?
  odsCode                  String             @unique
  patients                 Patient[]
  phoneNumber              String?
  postcode                 String?
  practiceInfoLinks        PracticeInfoLink[]
  remindAfter              Int                @default(10)
  remindedAt               DateTime?
  remindEvery              Int                @default(3)
  sector                   EnumPracticeSector
  senderId                 String?
  stripeConnectedAccountId String?
  updatedAt                DateTime           @updatedAt
  users                    User[]
  website                  String?
  workflowTemplates        WorkflowTemplate[]

  @@map("practices")
}

model Template {
  category    EnumTemplateCategory[]
  createdAt   DateTime               @default(now())
  displayName String
  enabled     Boolean
  id          String                 @id @default(uuid())
  sector      EnumTemplateSector
  text        String
  updatedAt   DateTime               @updatedAt

  @@map("templates")
}

model WorkflowStep {
  createdAt     DateTime  @default(now())
  executedOn    DateTime?
  executionDate DateTime
  id            String    @id @default(uuid())
  message       String
  updatedAt     DateTime  @updatedAt
  workflow      Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId    String

  @@map("workflow_steps")
}

model WorkflowTemplateStep {
  createdAt           DateTime         @default(now())
  id                  String           @id @default(uuid())
  message             String
  timeOffsetInSeconds String
  updatedAt           DateTime         @updatedAt
  workflowTemplate    WorkflowTemplate @relation(fields: [workflowTemplateId], references: [id], onDelete: Cascade)
  workflowTemplateId  String

  @@map("workflow_template_steps")
}

model WorkflowTemplate {
  createdAt  DateTime                   @default(now())
  id         String                     @id @default(uuid())
  name       String
  practice   Practice?                  @relation(fields: [practiceId], references: [id])
  practiceId String?
  sector     EnumWorkflowTemplateSector
  steps      WorkflowTemplateStep[]
  updatedAt  DateTime                   @updatedAt

  @@map("workflow_templates")
}

model Workflow {
  anchorDate DateTime?
  createdAt  DateTime       @default(now())
  id         String         @id @default(uuid())
  name       String
  patient    Patient        @relation(fields: [patientId], references: [id])
  patientId  String
  steps      WorkflowStep[]
  updatedAt  DateTime       @updatedAt

  @@map("workflows")
}

enum EnumFormLinkSector {
  Dental
  GP
}

enum EnumLeadFormLinkSector {
  Dental
  GP
}

enum EnumLinkCategory {
  conditions
  live_well
  Tools
  video
  common_health_questions
  start_4_life
  Medicines
}

enum EnumLinkSector {
  Dental
  GP
}

enum EnumPracticeSector {
  Dental
  GP
}

enum EnumTemplateCategory {
  appointment
  prescriptions
  review
  sample
  test_results
}

enum EnumTemplateSector {
  Dental
  GP
}

enum EnumWorkflowTemplateSector {
  Dental
  GP
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkflowTemplate } from "./WorkflowTemplate";
import { WorkflowTemplateCountArgs } from "./WorkflowTemplateCountArgs";
import { WorkflowTemplateFindManyArgs } from "./WorkflowTemplateFindManyArgs";
import { WorkflowTemplateFindUniqueArgs } from "./WorkflowTemplateFindUniqueArgs";
import { CreateWorkflowTemplateArgs } from "./CreateWorkflowTemplateArgs";
import { UpdateWorkflowTemplateArgs } from "./UpdateWorkflowTemplateArgs";
import { DeleteWorkflowTemplateArgs } from "./DeleteWorkflowTemplateArgs";
import { WorkflowTemplateStepFindManyArgs } from "../../workflowTemplateStep/base/WorkflowTemplateStepFindManyArgs";
import { WorkflowTemplateStep } from "../../workflowTemplateStep/base/WorkflowTemplateStep";
import { Practice } from "../../practice/base/Practice";
import { WorkflowTemplateService } from "../workflowTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkflowTemplate)
export class WorkflowTemplateResolverBase {
  constructor(
    protected readonly service: WorkflowTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "read",
    possession: "any",
  })
  async _workflowTemplatesMeta(
    @graphql.Args() args: WorkflowTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkflowTemplate])
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "read",
    possession: "any",
  })
  async workflowTemplates(
    @graphql.Args() args: WorkflowTemplateFindManyArgs
  ): Promise<WorkflowTemplate[]> {
    return this.service.workflowTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkflowTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "read",
    possession: "own",
  })
  async workflowTemplate(
    @graphql.Args() args: WorkflowTemplateFindUniqueArgs
  ): Promise<WorkflowTemplate | null> {
    const result = await this.service.workflowTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkflowTemplate)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "create",
    possession: "any",
  })
  async createWorkflowTemplate(
    @graphql.Args() args: CreateWorkflowTemplateArgs
  ): Promise<WorkflowTemplate> {
    return await this.service.createWorkflowTemplate({
      ...args,
      data: {
        ...args.data,

        practice: {
          connect: args.data.practice,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkflowTemplate)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "update",
    possession: "any",
  })
  async updateWorkflowTemplate(
    @graphql.Args() args: UpdateWorkflowTemplateArgs
  ): Promise<WorkflowTemplate | null> {
    try {
      return await this.service.updateWorkflowTemplate({
        ...args,
        data: {
          ...args.data,

          practice: {
            connect: args.data.practice,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkflowTemplate)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "delete",
    possession: "any",
  })
  async deleteWorkflowTemplate(
    @graphql.Args() args: DeleteWorkflowTemplateArgs
  ): Promise<WorkflowTemplate | null> {
    try {
      return await this.service.deleteWorkflowTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkflowTemplateStep], { name: "steps" })
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "read",
    possession: "any",
  })
  async findSteps(
    @graphql.Parent() parent: WorkflowTemplate,
    @graphql.Args() args: WorkflowTemplateStepFindManyArgs
  ): Promise<WorkflowTemplateStep[]> {
    const results = await this.service.findSteps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Practice, {
    nullable: true,
    name: "practice",
  })
  @nestAccessControl.UseRoles({
    resource: "Practice",
    action: "read",
    possession: "any",
  })
  async getPractice(
    @graphql.Parent() parent: WorkflowTemplate
  ): Promise<Practice | null> {
    const result = await this.service.getPractice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkflowTemplate as PrismaWorkflowTemplate,
  WorkflowTemplateStep as PrismaWorkflowTemplateStep,
  Practice as PrismaPractice,
} from "@prisma/client";

export class WorkflowTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkflowTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workflowTemplate.count(args);
  }

  async workflowTemplates<T extends Prisma.WorkflowTemplateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateFindManyArgs>
  ): Promise<PrismaWorkflowTemplate[]> {
    return this.prisma.workflowTemplate.findMany<Prisma.WorkflowTemplateFindManyArgs>(
      args
    );
  }
  async workflowTemplate<T extends Prisma.WorkflowTemplateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateFindUniqueArgs>
  ): Promise<PrismaWorkflowTemplate | null> {
    return this.prisma.workflowTemplate.findUnique(args);
  }
  async createWorkflowTemplate<T extends Prisma.WorkflowTemplateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateCreateArgs>
  ): Promise<PrismaWorkflowTemplate> {
    return this.prisma.workflowTemplate.create<T>(args);
  }
  async updateWorkflowTemplate<T extends Prisma.WorkflowTemplateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateUpdateArgs>
  ): Promise<PrismaWorkflowTemplate> {
    return this.prisma.workflowTemplate.update<T>(args);
  }
  async deleteWorkflowTemplate<T extends Prisma.WorkflowTemplateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateDeleteArgs>
  ): Promise<PrismaWorkflowTemplate> {
    return this.prisma.workflowTemplate.delete(args);
  }

  async findSteps(
    parentId: string,
    args: Prisma.WorkflowTemplateStepFindManyArgs
  ): Promise<PrismaWorkflowTemplateStep[]> {
    return this.prisma.workflowTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .steps(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.workflowTemplate
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

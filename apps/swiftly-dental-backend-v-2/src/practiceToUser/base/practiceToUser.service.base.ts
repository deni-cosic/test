/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PracticeToUser as PrismaPracticeToUser,
  Practice as PrismaPractice,
  User as PrismaUser,
} from "@prisma/client";

export class PracticeToUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PracticeToUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.practiceToUser.count(args);
  }

  async practiceToUsers<T extends Prisma.PracticeToUserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeToUserFindManyArgs>
  ): Promise<PrismaPracticeToUser[]> {
    return this.prisma.practiceToUser.findMany<Prisma.PracticeToUserFindManyArgs>(
      args
    );
  }
  async practiceToUser<T extends Prisma.PracticeToUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeToUserFindUniqueArgs>
  ): Promise<PrismaPracticeToUser | null> {
    return this.prisma.practiceToUser.findUnique(args);
  }
  async createPracticeToUser<T extends Prisma.PracticeToUserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeToUserCreateArgs>
  ): Promise<PrismaPracticeToUser> {
    return this.prisma.practiceToUser.create<T>(args);
  }
  async updatePracticeToUser<T extends Prisma.PracticeToUserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeToUserUpdateArgs>
  ): Promise<PrismaPracticeToUser> {
    return this.prisma.practiceToUser.update<T>(args);
  }
  async deletePracticeToUser<T extends Prisma.PracticeToUserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeToUserDeleteArgs>
  ): Promise<PrismaPracticeToUser> {
    return this.prisma.practiceToUser.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.practiceToUser
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.practiceToUser
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}

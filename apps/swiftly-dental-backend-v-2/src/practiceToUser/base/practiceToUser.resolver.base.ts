/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PracticeToUser } from "./PracticeToUser";
import { PracticeToUserCountArgs } from "./PracticeToUserCountArgs";
import { PracticeToUserFindManyArgs } from "./PracticeToUserFindManyArgs";
import { PracticeToUserFindUniqueArgs } from "./PracticeToUserFindUniqueArgs";
import { CreatePracticeToUserArgs } from "./CreatePracticeToUserArgs";
import { UpdatePracticeToUserArgs } from "./UpdatePracticeToUserArgs";
import { DeletePracticeToUserArgs } from "./DeletePracticeToUserArgs";
import { Practice } from "../../practice/base/Practice";
import { User } from "../../user/base/User";
import { PracticeToUserService } from "../practiceToUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PracticeToUser)
export class PracticeToUserResolverBase {
  constructor(
    protected readonly service: PracticeToUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PracticeToUser",
    action: "read",
    possession: "any",
  })
  async _practiceToUsersMeta(
    @graphql.Args() args: PracticeToUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PracticeToUser])
  @nestAccessControl.UseRoles({
    resource: "PracticeToUser",
    action: "read",
    possession: "any",
  })
  async practiceToUsers(
    @graphql.Args() args: PracticeToUserFindManyArgs
  ): Promise<PracticeToUser[]> {
    return this.service.practiceToUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PracticeToUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PracticeToUser",
    action: "read",
    possession: "own",
  })
  async practiceToUser(
    @graphql.Args() args: PracticeToUserFindUniqueArgs
  ): Promise<PracticeToUser | null> {
    const result = await this.service.practiceToUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PracticeToUser)
  @nestAccessControl.UseRoles({
    resource: "PracticeToUser",
    action: "create",
    possession: "any",
  })
  async createPracticeToUser(
    @graphql.Args() args: CreatePracticeToUserArgs
  ): Promise<PracticeToUser> {
    return await this.service.createPracticeToUser({
      ...args,
      data: {
        ...args.data,

        practice: args.data.practice
          ? {
              connect: args.data.practice,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PracticeToUser)
  @nestAccessControl.UseRoles({
    resource: "PracticeToUser",
    action: "update",
    possession: "any",
  })
  async updatePracticeToUser(
    @graphql.Args() args: UpdatePracticeToUserArgs
  ): Promise<PracticeToUser | null> {
    try {
      return await this.service.updatePracticeToUser({
        ...args,
        data: {
          ...args.data,

          practice: args.data.practice
            ? {
                connect: args.data.practice,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PracticeToUser)
  @nestAccessControl.UseRoles({
    resource: "PracticeToUser",
    action: "delete",
    possession: "any",
  })
  async deletePracticeToUser(
    @graphql.Args() args: DeletePracticeToUserArgs
  ): Promise<PracticeToUser | null> {
    try {
      return await this.service.deletePracticeToUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Practice, {
    nullable: true,
    name: "practice",
  })
  @nestAccessControl.UseRoles({
    resource: "Practice",
    action: "read",
    possession: "any",
  })
  async getPractice(
    @graphql.Parent() parent: PracticeToUser
  ): Promise<Practice | null> {
    const result = await this.service.getPractice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: PracticeToUser
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkflowTemplateStep as PrismaWorkflowTemplateStep,
  WorkflowTemplate as PrismaWorkflowTemplate,
} from "@prisma/client";

export class WorkflowTemplateStepServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkflowTemplateStepCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workflowTemplateStep.count(args);
  }

  async workflowTemplateSteps<
    T extends Prisma.WorkflowTemplateStepFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateStepFindManyArgs>
  ): Promise<PrismaWorkflowTemplateStep[]> {
    return this.prisma.workflowTemplateStep.findMany<Prisma.WorkflowTemplateStepFindManyArgs>(
      args
    );
  }
  async workflowTemplateStep<
    T extends Prisma.WorkflowTemplateStepFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateStepFindUniqueArgs>
  ): Promise<PrismaWorkflowTemplateStep | null> {
    return this.prisma.workflowTemplateStep.findUnique(args);
  }
  async createWorkflowTemplateStep<
    T extends Prisma.WorkflowTemplateStepCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateStepCreateArgs>
  ): Promise<PrismaWorkflowTemplateStep> {
    return this.prisma.workflowTemplateStep.create<T>(args);
  }
  async updateWorkflowTemplateStep<
    T extends Prisma.WorkflowTemplateStepUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateStepUpdateArgs>
  ): Promise<PrismaWorkflowTemplateStep> {
    return this.prisma.workflowTemplateStep.update<T>(args);
  }
  async deleteWorkflowTemplateStep<
    T extends Prisma.WorkflowTemplateStepDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WorkflowTemplateStepDeleteArgs>
  ): Promise<PrismaWorkflowTemplateStep> {
    return this.prisma.workflowTemplateStep.delete(args);
  }

  async getWorkflowTemplate(
    parentId: string
  ): Promise<PrismaWorkflowTemplate | null> {
    return this.prisma.workflowTemplateStep
      .findUnique({
        where: { id: parentId },
      })
      .workflowTemplate();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkflowTemplateStep } from "./WorkflowTemplateStep";
import { WorkflowTemplateStepCountArgs } from "./WorkflowTemplateStepCountArgs";
import { WorkflowTemplateStepFindManyArgs } from "./WorkflowTemplateStepFindManyArgs";
import { WorkflowTemplateStepFindUniqueArgs } from "./WorkflowTemplateStepFindUniqueArgs";
import { CreateWorkflowTemplateStepArgs } from "./CreateWorkflowTemplateStepArgs";
import { UpdateWorkflowTemplateStepArgs } from "./UpdateWorkflowTemplateStepArgs";
import { DeleteWorkflowTemplateStepArgs } from "./DeleteWorkflowTemplateStepArgs";
import { WorkflowTemplate } from "../../workflowTemplate/base/WorkflowTemplate";
import { WorkflowTemplateStepService } from "../workflowTemplateStep.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkflowTemplateStep)
export class WorkflowTemplateStepResolverBase {
  constructor(
    protected readonly service: WorkflowTemplateStepService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "read",
    possession: "any",
  })
  async _workflowTemplateStepsMeta(
    @graphql.Args() args: WorkflowTemplateStepCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkflowTemplateStep])
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "read",
    possession: "any",
  })
  async workflowTemplateSteps(
    @graphql.Args() args: WorkflowTemplateStepFindManyArgs
  ): Promise<WorkflowTemplateStep[]> {
    return this.service.workflowTemplateSteps(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkflowTemplateStep, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "read",
    possession: "own",
  })
  async workflowTemplateStep(
    @graphql.Args() args: WorkflowTemplateStepFindUniqueArgs
  ): Promise<WorkflowTemplateStep | null> {
    const result = await this.service.workflowTemplateStep(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkflowTemplateStep)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "create",
    possession: "any",
  })
  async createWorkflowTemplateStep(
    @graphql.Args() args: CreateWorkflowTemplateStepArgs
  ): Promise<WorkflowTemplateStep> {
    return await this.service.createWorkflowTemplateStep({
      ...args,
      data: {
        ...args.data,

        workflowTemplate: {
          connect: args.data.workflowTemplate,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkflowTemplateStep)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "update",
    possession: "any",
  })
  async updateWorkflowTemplateStep(
    @graphql.Args() args: UpdateWorkflowTemplateStepArgs
  ): Promise<WorkflowTemplateStep | null> {
    try {
      return await this.service.updateWorkflowTemplateStep({
        ...args,
        data: {
          ...args.data,

          workflowTemplate: {
            connect: args.data.workflowTemplate,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkflowTemplateStep)
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplateStep",
    action: "delete",
    possession: "any",
  })
  async deleteWorkflowTemplateStep(
    @graphql.Args() args: DeleteWorkflowTemplateStepArgs
  ): Promise<WorkflowTemplateStep | null> {
    try {
      return await this.service.deleteWorkflowTemplateStep(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WorkflowTemplate, {
    nullable: true,
    name: "workflowTemplate",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkflowTemplate",
    action: "read",
    possession: "any",
  })
  async getWorkflowTemplate(
    @graphql.Parent() parent: WorkflowTemplateStep
  ): Promise<WorkflowTemplate | null> {
    const result = await this.service.getWorkflowTemplate(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

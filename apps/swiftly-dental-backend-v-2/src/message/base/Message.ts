/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsDate,
  ValidateNested,
  IsOptional,
  IsEnum,
  IsInt,
  Max,
} from "class-validator";

import { Type } from "class-transformer";
import { MessageLog } from "../../messageLog/base/MessageLog";
import { EnumMessageMessageType } from "./EnumMessageMessageType";
import { Patient } from "../../patient/base/Patient";
import { Practice } from "../../practice/base/Practice";
import { EnumMessageStatus } from "./EnumMessageStatus";

@ObjectType()
class Message {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  content!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [MessageLog],
  })
  @ValidateNested()
  @Type(() => MessageLog)
  @IsOptional()
  messageLog?: Array<MessageLog>;

  @ApiProperty({
    required: true,
    enum: EnumMessageMessageType,
  })
  @IsEnum(EnumMessageMessageType)
  @Field(() => EnumMessageMessageType, {
    nullable: true,
  })
  messageType?: "Instant" | "Delayed";

  @ApiProperty({
    required: true,
    type: () => Patient,
  })
  @ValidateNested()
  @Type(() => Patient)
  patient?: Patient;

  @ApiProperty({
    required: true,
    type: () => Practice,
  })
  @ValidateNested()
  @Type(() => Practice)
  practice?: Practice;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  provider!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  providerId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  queueItemId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  sentById!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  sentOn!: Date | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @Field(() => Number)
  smsCount!: number;

  @ApiProperty({
    required: false,
    enum: EnumMessageStatus,
  })
  @IsEnum(EnumMessageStatus)
  @IsOptional()
  @Field(() => EnumMessageStatus, {
    nullable: true,
  })
  status?: "Pending" | "Delivered" | "Failed" | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Message as Message };

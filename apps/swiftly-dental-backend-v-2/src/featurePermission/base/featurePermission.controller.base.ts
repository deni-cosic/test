/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FeaturePermissionService } from "../featurePermission.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FeaturePermissionCreateInput } from "./FeaturePermissionCreateInput";
import { FeaturePermission } from "./FeaturePermission";
import { FeaturePermissionFindManyArgs } from "./FeaturePermissionFindManyArgs";
import { FeaturePermissionWhereUniqueInput } from "./FeaturePermissionWhereUniqueInput";
import { FeaturePermissionUpdateInput } from "./FeaturePermissionUpdateInput";
import { PracticeFindManyArgs } from "../../practice/base/PracticeFindManyArgs";
import { Practice } from "../../practice/base/Practice";
import { PracticeWhereUniqueInput } from "../../practice/base/PracticeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FeaturePermissionControllerBase {
  constructor(
    protected readonly service: FeaturePermissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeaturePermission })
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFeaturePermission(
    @common.Body() data: FeaturePermissionCreateInput
  ): Promise<FeaturePermission> {
    return await this.service.createFeaturePermission({
      data: data,
      select: {
        analytics: true,
        createdAt: true,
        dentalAdviceLink: true,
        dentalSubscriptions: true,
        form: true,
        id: true,
        leads: true,
        messageTemplate: true,
        practiceInfoLink: true,
        requestFeedback: true,
        requestPayment: true,
        sendDocument: true,
        sendMessageToMany: true,
        updatedAt: true,
        videoCall: true,
        workflows: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FeaturePermission] })
  @ApiNestedQuery(FeaturePermissionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async featurePermissions(
    @common.Req() request: Request
  ): Promise<FeaturePermission[]> {
    const args = plainToClass(FeaturePermissionFindManyArgs, request.query);
    return this.service.featurePermissions({
      ...args,
      select: {
        analytics: true,
        createdAt: true,
        dentalAdviceLink: true,
        dentalSubscriptions: true,
        form: true,
        id: true,
        leads: true,
        messageTemplate: true,
        practiceInfoLink: true,
        requestFeedback: true,
        requestPayment: true,
        sendDocument: true,
        sendMessageToMany: true,
        updatedAt: true,
        videoCall: true,
        workflows: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeaturePermission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async featurePermission(
    @common.Param() params: FeaturePermissionWhereUniqueInput
  ): Promise<FeaturePermission | null> {
    const result = await this.service.featurePermission({
      where: params,
      select: {
        analytics: true,
        createdAt: true,
        dentalAdviceLink: true,
        dentalSubscriptions: true,
        form: true,
        id: true,
        leads: true,
        messageTemplate: true,
        practiceInfoLink: true,
        requestFeedback: true,
        requestPayment: true,
        sendDocument: true,
        sendMessageToMany: true,
        updatedAt: true,
        videoCall: true,
        workflows: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeaturePermission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFeaturePermission(
    @common.Param() params: FeaturePermissionWhereUniqueInput,
    @common.Body() data: FeaturePermissionUpdateInput
  ): Promise<FeaturePermission | null> {
    try {
      return await this.service.updateFeaturePermission({
        where: params,
        data: data,
        select: {
          analytics: true,
          createdAt: true,
          dentalAdviceLink: true,
          dentalSubscriptions: true,
          form: true,
          id: true,
          leads: true,
          messageTemplate: true,
          practiceInfoLink: true,
          requestFeedback: true,
          requestPayment: true,
          sendDocument: true,
          sendMessageToMany: true,
          updatedAt: true,
          videoCall: true,
          workflows: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeaturePermission })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFeaturePermission(
    @common.Param() params: FeaturePermissionWhereUniqueInput
  ): Promise<FeaturePermission | null> {
    try {
      return await this.service.deleteFeaturePermission({
        where: params,
        select: {
          analytics: true,
          createdAt: true,
          dentalAdviceLink: true,
          dentalSubscriptions: true,
          form: true,
          id: true,
          leads: true,
          messageTemplate: true,
          practiceInfoLink: true,
          requestFeedback: true,
          requestPayment: true,
          sendDocument: true,
          sendMessageToMany: true,
          updatedAt: true,
          videoCall: true,
          workflows: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/practices")
  @ApiNestedQuery(PracticeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Practice",
    action: "read",
    possession: "any",
  })
  async findPractices(
    @common.Req() request: Request,
    @common.Param() params: FeaturePermissionWhereUniqueInput
  ): Promise<Practice[]> {
    const query = plainToClass(PracticeFindManyArgs, request.query);
    const results = await this.service.findPractices(params.id, {
      ...query,
      select: {
        addressLine1: true,
        addressLine2: true,
        addressLine3: true,
        createdAt: true,

        featurePermission: {
          select: {
            id: true,
          },
        },

        googlePlaceId: true,
        id: true,
        name: true,
        nhsReviewUrl: true,
        odsCode: true,
        phoneNumber: true,
        postcode: true,
        remindAfter: true,
        remindedAt: true,
        remindEvery: true,
        sector: true,
        senderId: true,
        stripeConnectedAccountId: true,
        updatedAt: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/practices")
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "update",
    possession: "any",
  })
  async connectPractices(
    @common.Param() params: FeaturePermissionWhereUniqueInput,
    @common.Body() body: PracticeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      practices: {
        connect: body,
      },
    };
    await this.service.updateFeaturePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/practices")
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "update",
    possession: "any",
  })
  async updatePractices(
    @common.Param() params: FeaturePermissionWhereUniqueInput,
    @common.Body() body: PracticeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      practices: {
        set: body,
      },
    };
    await this.service.updateFeaturePermission({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/practices")
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "update",
    possession: "any",
  })
  async disconnectPractices(
    @common.Param() params: FeaturePermissionWhereUniqueInput,
    @common.Body() body: PracticeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      practices: {
        disconnect: body,
      },
    };
    await this.service.updateFeaturePermission({
      where: params,
      data,
      select: { id: true },
    });
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FeaturePermission as PrismaFeaturePermission,
  Practice as PrismaPractice,
} from "@prisma/client";

export class FeaturePermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FeaturePermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.featurePermission.count(args);
  }

  async featurePermissions<T extends Prisma.FeaturePermissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeaturePermissionFindManyArgs>
  ): Promise<PrismaFeaturePermission[]> {
    return this.prisma.featurePermission.findMany<Prisma.FeaturePermissionFindManyArgs>(
      args
    );
  }
  async featurePermission<T extends Prisma.FeaturePermissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeaturePermissionFindUniqueArgs>
  ): Promise<PrismaFeaturePermission | null> {
    return this.prisma.featurePermission.findUnique(args);
  }
  async createFeaturePermission<T extends Prisma.FeaturePermissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeaturePermissionCreateArgs>
  ): Promise<PrismaFeaturePermission> {
    return this.prisma.featurePermission.create<T>(args);
  }
  async updateFeaturePermission<T extends Prisma.FeaturePermissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeaturePermissionUpdateArgs>
  ): Promise<PrismaFeaturePermission> {
    return this.prisma.featurePermission.update<T>(args);
  }
  async deleteFeaturePermission<T extends Prisma.FeaturePermissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FeaturePermissionDeleteArgs>
  ): Promise<PrismaFeaturePermission> {
    return this.prisma.featurePermission.delete(args);
  }

  async findPractices(
    parentId: string,
    args: Prisma.PracticeFindManyArgs
  ): Promise<PrismaPractice[]> {
    return this.prisma.featurePermission
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .practices(args);
  }
}

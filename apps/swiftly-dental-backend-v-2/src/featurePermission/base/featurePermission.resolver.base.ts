/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FeaturePermission } from "./FeaturePermission";
import { FeaturePermissionCountArgs } from "./FeaturePermissionCountArgs";
import { FeaturePermissionFindManyArgs } from "./FeaturePermissionFindManyArgs";
import { FeaturePermissionFindUniqueArgs } from "./FeaturePermissionFindUniqueArgs";
import { CreateFeaturePermissionArgs } from "./CreateFeaturePermissionArgs";
import { UpdateFeaturePermissionArgs } from "./UpdateFeaturePermissionArgs";
import { DeleteFeaturePermissionArgs } from "./DeleteFeaturePermissionArgs";
import { PracticeFindManyArgs } from "../../practice/base/PracticeFindManyArgs";
import { Practice } from "../../practice/base/Practice";
import { FeaturePermissionService } from "../featurePermission.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FeaturePermission)
export class FeaturePermissionResolverBase {
  constructor(
    protected readonly service: FeaturePermissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "read",
    possession: "any",
  })
  async _featurePermissionsMeta(
    @graphql.Args() args: FeaturePermissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FeaturePermission])
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "read",
    possession: "any",
  })
  async featurePermissions(
    @graphql.Args() args: FeaturePermissionFindManyArgs
  ): Promise<FeaturePermission[]> {
    return this.service.featurePermissions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FeaturePermission, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "read",
    possession: "own",
  })
  async featurePermission(
    @graphql.Args() args: FeaturePermissionFindUniqueArgs
  ): Promise<FeaturePermission | null> {
    const result = await this.service.featurePermission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeaturePermission)
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "create",
    possession: "any",
  })
  async createFeaturePermission(
    @graphql.Args() args: CreateFeaturePermissionArgs
  ): Promise<FeaturePermission> {
    return await this.service.createFeaturePermission({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FeaturePermission)
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "update",
    possession: "any",
  })
  async updateFeaturePermission(
    @graphql.Args() args: UpdateFeaturePermissionArgs
  ): Promise<FeaturePermission | null> {
    try {
      return await this.service.updateFeaturePermission({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FeaturePermission)
  @nestAccessControl.UseRoles({
    resource: "FeaturePermission",
    action: "delete",
    possession: "any",
  })
  async deleteFeaturePermission(
    @graphql.Args() args: DeleteFeaturePermissionArgs
  ): Promise<FeaturePermission | null> {
    try {
      return await this.service.deleteFeaturePermission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Practice], { name: "practices" })
  @nestAccessControl.UseRoles({
    resource: "Practice",
    action: "read",
    possession: "any",
  })
  async findPractices(
    @graphql.Parent() parent: FeaturePermission,
    @graphql.Args() args: PracticeFindManyArgs
  ): Promise<Practice[]> {
    const results = await this.service.findPractices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LeadFormLink as PrismaLeadFormLink,
  Practice as PrismaPractice,
} from "@prisma/client";

export class LeadFormLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeadFormLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leadFormLink.count(args);
  }

  async leadFormLinks<T extends Prisma.LeadFormLinkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormLinkFindManyArgs>
  ): Promise<PrismaLeadFormLink[]> {
    return this.prisma.leadFormLink.findMany<Prisma.LeadFormLinkFindManyArgs>(
      args
    );
  }
  async leadFormLink<T extends Prisma.LeadFormLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormLinkFindUniqueArgs>
  ): Promise<PrismaLeadFormLink | null> {
    return this.prisma.leadFormLink.findUnique(args);
  }
  async createLeadFormLink<T extends Prisma.LeadFormLinkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormLinkCreateArgs>
  ): Promise<PrismaLeadFormLink> {
    return this.prisma.leadFormLink.create<T>(args);
  }
  async updateLeadFormLink<T extends Prisma.LeadFormLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormLinkUpdateArgs>
  ): Promise<PrismaLeadFormLink> {
    return this.prisma.leadFormLink.update<T>(args);
  }
  async deleteLeadFormLink<T extends Prisma.LeadFormLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormLinkDeleteArgs>
  ): Promise<PrismaLeadFormLink> {
    return this.prisma.leadFormLink.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.leadFormLink
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LeadFormLink as PrismaLeadFormLink,
  Practice as PrismaPractice,
} from "@prisma/client";

export class LeadFormLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeadFormLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leadFormLink.count(args);
  }

  async leadFormLinks(
    args: Prisma.LeadFormLinkFindManyArgs
  ): Promise<PrismaLeadFormLink[]> {
    return this.prisma.leadFormLink.findMany(args);
  }
  async leadFormLink(
    args: Prisma.LeadFormLinkFindUniqueArgs
  ): Promise<PrismaLeadFormLink | null> {
    return this.prisma.leadFormLink.findUnique(args);
  }
  async createLeadFormLink(
    args: Prisma.LeadFormLinkCreateArgs
  ): Promise<PrismaLeadFormLink> {
    return this.prisma.leadFormLink.create(args);
  }
  async updateLeadFormLink(
    args: Prisma.LeadFormLinkUpdateArgs
  ): Promise<PrismaLeadFormLink> {
    return this.prisma.leadFormLink.update(args);
  }
  async deleteLeadFormLink(
    args: Prisma.LeadFormLinkDeleteArgs
  ): Promise<PrismaLeadFormLink> {
    return this.prisma.leadFormLink.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.leadFormLink
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SubscriptionPlansStripeProduct } from "./SubscriptionPlansStripeProduct";
import { SubscriptionPlansStripeProductCountArgs } from "./SubscriptionPlansStripeProductCountArgs";
import { SubscriptionPlansStripeProductFindManyArgs } from "./SubscriptionPlansStripeProductFindManyArgs";
import { SubscriptionPlansStripeProductFindUniqueArgs } from "./SubscriptionPlansStripeProductFindUniqueArgs";
import { CreateSubscriptionPlansStripeProductArgs } from "./CreateSubscriptionPlansStripeProductArgs";
import { UpdateSubscriptionPlansStripeProductArgs } from "./UpdateSubscriptionPlansStripeProductArgs";
import { DeleteSubscriptionPlansStripeProductArgs } from "./DeleteSubscriptionPlansStripeProductArgs";
import { SubscriptionPlan } from "../../subscriptionPlan/base/SubscriptionPlan";
import { SubscriptionPlansStripeProductService } from "../subscriptionPlansStripeProduct.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SubscriptionPlansStripeProduct)
export class SubscriptionPlansStripeProductResolverBase {
  constructor(
    protected readonly service: SubscriptionPlansStripeProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlansStripeProduct",
    action: "read",
    possession: "any",
  })
  async _subscriptionPlansStripeProductsMeta(
    @graphql.Args() args: SubscriptionPlansStripeProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SubscriptionPlansStripeProduct])
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlansStripeProduct",
    action: "read",
    possession: "any",
  })
  async subscriptionPlansStripeProducts(
    @graphql.Args() args: SubscriptionPlansStripeProductFindManyArgs
  ): Promise<SubscriptionPlansStripeProduct[]> {
    return this.service.subscriptionPlansStripeProducts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SubscriptionPlansStripeProduct, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlansStripeProduct",
    action: "read",
    possession: "own",
  })
  async subscriptionPlansStripeProduct(
    @graphql.Args() args: SubscriptionPlansStripeProductFindUniqueArgs
  ): Promise<SubscriptionPlansStripeProduct | null> {
    const result = await this.service.subscriptionPlansStripeProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionPlansStripeProduct)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlansStripeProduct",
    action: "create",
    possession: "any",
  })
  async createSubscriptionPlansStripeProduct(
    @graphql.Args() args: CreateSubscriptionPlansStripeProductArgs
  ): Promise<SubscriptionPlansStripeProduct> {
    return await this.service.createSubscriptionPlansStripeProduct({
      ...args,
      data: {
        ...args.data,

        subscriptionPlan: {
          connect: args.data.subscriptionPlan,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SubscriptionPlansStripeProduct)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlansStripeProduct",
    action: "update",
    possession: "any",
  })
  async updateSubscriptionPlansStripeProduct(
    @graphql.Args() args: UpdateSubscriptionPlansStripeProductArgs
  ): Promise<SubscriptionPlansStripeProduct | null> {
    try {
      return await this.service.updateSubscriptionPlansStripeProduct({
        ...args,
        data: {
          ...args.data,

          subscriptionPlan: {
            connect: args.data.subscriptionPlan,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SubscriptionPlansStripeProduct)
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlansStripeProduct",
    action: "delete",
    possession: "any",
  })
  async deleteSubscriptionPlansStripeProduct(
    @graphql.Args() args: DeleteSubscriptionPlansStripeProductArgs
  ): Promise<SubscriptionPlansStripeProduct | null> {
    try {
      return await this.service.deleteSubscriptionPlansStripeProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SubscriptionPlan, {
    nullable: true,
    name: "subscriptionPlan",
  })
  @nestAccessControl.UseRoles({
    resource: "SubscriptionPlan",
    action: "read",
    possession: "any",
  })
  async getSubscriptionPlan(
    @graphql.Parent() parent: SubscriptionPlansStripeProduct
  ): Promise<SubscriptionPlan | null> {
    const result = await this.service.getSubscriptionPlan(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SubscriptionPlansStripeProduct as PrismaSubscriptionPlansStripeProduct,
  SubscriptionPlan as PrismaSubscriptionPlan,
} from "@prisma/client";

export class SubscriptionPlansStripeProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubscriptionPlansStripeProductCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subscriptionPlansStripeProduct.count(args);
  }

  async subscriptionPlansStripeProducts<
    T extends Prisma.SubscriptionPlansStripeProductFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.SubscriptionPlansStripeProductFindManyArgs
    >
  ): Promise<PrismaSubscriptionPlansStripeProduct[]> {
    return this.prisma.subscriptionPlansStripeProduct.findMany<Prisma.SubscriptionPlansStripeProductFindManyArgs>(
      args
    );
  }
  async subscriptionPlansStripeProduct<
    T extends Prisma.SubscriptionPlansStripeProductFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.SubscriptionPlansStripeProductFindUniqueArgs
    >
  ): Promise<PrismaSubscriptionPlansStripeProduct | null> {
    return this.prisma.subscriptionPlansStripeProduct.findUnique(args);
  }
  async createSubscriptionPlansStripeProduct<
    T extends Prisma.SubscriptionPlansStripeProductCreateArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.SubscriptionPlansStripeProductCreateArgs
    >
  ): Promise<PrismaSubscriptionPlansStripeProduct> {
    return this.prisma.subscriptionPlansStripeProduct.create<T>(args);
  }
  async updateSubscriptionPlansStripeProduct<
    T extends Prisma.SubscriptionPlansStripeProductUpdateArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.SubscriptionPlansStripeProductUpdateArgs
    >
  ): Promise<PrismaSubscriptionPlansStripeProduct> {
    return this.prisma.subscriptionPlansStripeProduct.update<T>(args);
  }
  async deleteSubscriptionPlansStripeProduct<
    T extends Prisma.SubscriptionPlansStripeProductDeleteArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.SubscriptionPlansStripeProductDeleteArgs
    >
  ): Promise<PrismaSubscriptionPlansStripeProduct> {
    return this.prisma.subscriptionPlansStripeProduct.delete(args);
  }

  async getSubscriptionPlan(
    parentId: string
  ): Promise<PrismaSubscriptionPlan | null> {
    return this.prisma.subscriptionPlansStripeProduct
      .findUnique({
        where: { id: parentId },
      })
      .subscriptionPlan();
  }
}

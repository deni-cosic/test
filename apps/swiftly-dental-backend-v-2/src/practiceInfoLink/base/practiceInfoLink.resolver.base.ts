/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PracticeInfoLink } from "./PracticeInfoLink";
import { PracticeInfoLinkCountArgs } from "./PracticeInfoLinkCountArgs";
import { PracticeInfoLinkFindManyArgs } from "./PracticeInfoLinkFindManyArgs";
import { PracticeInfoLinkFindUniqueArgs } from "./PracticeInfoLinkFindUniqueArgs";
import { CreatePracticeInfoLinkArgs } from "./CreatePracticeInfoLinkArgs";
import { UpdatePracticeInfoLinkArgs } from "./UpdatePracticeInfoLinkArgs";
import { DeletePracticeInfoLinkArgs } from "./DeletePracticeInfoLinkArgs";
import { Practice } from "../../practice/base/Practice";
import { PracticeInfoLinkService } from "../practiceInfoLink.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PracticeInfoLink)
export class PracticeInfoLinkResolverBase {
  constructor(
    protected readonly service: PracticeInfoLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PracticeInfoLink",
    action: "read",
    possession: "any",
  })
  async _practiceInfoLinksMeta(
    @graphql.Args() args: PracticeInfoLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PracticeInfoLink])
  @nestAccessControl.UseRoles({
    resource: "PracticeInfoLink",
    action: "read",
    possession: "any",
  })
  async practiceInfoLinks(
    @graphql.Args() args: PracticeInfoLinkFindManyArgs
  ): Promise<PracticeInfoLink[]> {
    return this.service.practiceInfoLinks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PracticeInfoLink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PracticeInfoLink",
    action: "read",
    possession: "own",
  })
  async practiceInfoLink(
    @graphql.Args() args: PracticeInfoLinkFindUniqueArgs
  ): Promise<PracticeInfoLink | null> {
    const result = await this.service.practiceInfoLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PracticeInfoLink)
  @nestAccessControl.UseRoles({
    resource: "PracticeInfoLink",
    action: "create",
    possession: "any",
  })
  async createPracticeInfoLink(
    @graphql.Args() args: CreatePracticeInfoLinkArgs
  ): Promise<PracticeInfoLink> {
    return await this.service.createPracticeInfoLink({
      ...args,
      data: {
        ...args.data,

        practice: args.data.practice
          ? {
              connect: args.data.practice,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PracticeInfoLink)
  @nestAccessControl.UseRoles({
    resource: "PracticeInfoLink",
    action: "update",
    possession: "any",
  })
  async updatePracticeInfoLink(
    @graphql.Args() args: UpdatePracticeInfoLinkArgs
  ): Promise<PracticeInfoLink | null> {
    try {
      return await this.service.updatePracticeInfoLink({
        ...args,
        data: {
          ...args.data,

          practice: args.data.practice
            ? {
                connect: args.data.practice,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PracticeInfoLink)
  @nestAccessControl.UseRoles({
    resource: "PracticeInfoLink",
    action: "delete",
    possession: "any",
  })
  async deletePracticeInfoLink(
    @graphql.Args() args: DeletePracticeInfoLinkArgs
  ): Promise<PracticeInfoLink | null> {
    try {
      return await this.service.deletePracticeInfoLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Practice, {
    nullable: true,
    name: "practice",
  })
  @nestAccessControl.UseRoles({
    resource: "Practice",
    action: "read",
    possession: "any",
  })
  async getPractice(
    @graphql.Parent() parent: PracticeInfoLink
  ): Promise<Practice | null> {
    const result = await this.service.getPractice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

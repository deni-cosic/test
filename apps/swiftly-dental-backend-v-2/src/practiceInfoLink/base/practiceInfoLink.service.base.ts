/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PracticeInfoLink as PrismaPracticeInfoLink,
  Practice as PrismaPractice,
} from "@prisma/client";

export class PracticeInfoLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PracticeInfoLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.practiceInfoLink.count(args);
  }

  async practiceInfoLinks(
    args: Prisma.PracticeInfoLinkFindManyArgs
  ): Promise<PrismaPracticeInfoLink[]> {
    return this.prisma.practiceInfoLink.findMany(args);
  }
  async practiceInfoLink(
    args: Prisma.PracticeInfoLinkFindUniqueArgs
  ): Promise<PrismaPracticeInfoLink | null> {
    return this.prisma.practiceInfoLink.findUnique(args);
  }
  async createPracticeInfoLink(
    args: Prisma.PracticeInfoLinkCreateArgs
  ): Promise<PrismaPracticeInfoLink> {
    return this.prisma.practiceInfoLink.create(args);
  }
  async updatePracticeInfoLink(
    args: Prisma.PracticeInfoLinkUpdateArgs
  ): Promise<PrismaPracticeInfoLink> {
    return this.prisma.practiceInfoLink.update(args);
  }
  async deletePracticeInfoLink(
    args: Prisma.PracticeInfoLinkDeleteArgs
  ): Promise<PrismaPracticeInfoLink> {
    return this.prisma.practiceInfoLink.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.practiceInfoLink
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

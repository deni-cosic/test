/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PracticeInfoLink as PrismaPracticeInfoLink,
  Practice as PrismaPractice,
} from "@prisma/client";

export class PracticeInfoLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PracticeInfoLinkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.practiceInfoLink.count(args);
  }

  async practiceInfoLinks<T extends Prisma.PracticeInfoLinkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeInfoLinkFindManyArgs>
  ): Promise<PrismaPracticeInfoLink[]> {
    return this.prisma.practiceInfoLink.findMany<Prisma.PracticeInfoLinkFindManyArgs>(
      args
    );
  }
  async practiceInfoLink<T extends Prisma.PracticeInfoLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeInfoLinkFindUniqueArgs>
  ): Promise<PrismaPracticeInfoLink | null> {
    return this.prisma.practiceInfoLink.findUnique(args);
  }
  async createPracticeInfoLink<T extends Prisma.PracticeInfoLinkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeInfoLinkCreateArgs>
  ): Promise<PrismaPracticeInfoLink> {
    return this.prisma.practiceInfoLink.create<T>(args);
  }
  async updatePracticeInfoLink<T extends Prisma.PracticeInfoLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeInfoLinkUpdateArgs>
  ): Promise<PrismaPracticeInfoLink> {
    return this.prisma.practiceInfoLink.update<T>(args);
  }
  async deletePracticeInfoLink<T extends Prisma.PracticeInfoLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticeInfoLinkDeleteArgs>
  ): Promise<PrismaPracticeInfoLink> {
    return this.prisma.practiceInfoLink.delete(args);
  }

  async getPractice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.practiceInfoLink
      .findUnique({
        where: { id: parentId },
      })
      .practice();
  }
}

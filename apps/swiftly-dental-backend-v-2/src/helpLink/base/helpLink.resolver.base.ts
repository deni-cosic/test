/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { HelpLink } from "./HelpLink";
import { HelpLinkCountArgs } from "./HelpLinkCountArgs";
import { HelpLinkFindManyArgs } from "./HelpLinkFindManyArgs";
import { HelpLinkFindUniqueArgs } from "./HelpLinkFindUniqueArgs";
import { CreateHelpLinkArgs } from "./CreateHelpLinkArgs";
import { UpdateHelpLinkArgs } from "./UpdateHelpLinkArgs";
import { DeleteHelpLinkArgs } from "./DeleteHelpLinkArgs";
import { HelpLinkService } from "../helpLink.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HelpLink)
export class HelpLinkResolverBase {
  constructor(
    protected readonly service: HelpLinkService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HelpLink",
    action: "read",
    possession: "any",
  })
  async _helpLinksMeta(
    @graphql.Args() args: HelpLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HelpLink])
  @nestAccessControl.UseRoles({
    resource: "HelpLink",
    action: "read",
    possession: "any",
  })
  async helpLinks(
    @graphql.Args() args: HelpLinkFindManyArgs
  ): Promise<HelpLink[]> {
    return this.service.helpLinks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HelpLink, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HelpLink",
    action: "read",
    possession: "own",
  })
  async helpLink(
    @graphql.Args() args: HelpLinkFindUniqueArgs
  ): Promise<HelpLink | null> {
    const result = await this.service.helpLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HelpLink)
  @nestAccessControl.UseRoles({
    resource: "HelpLink",
    action: "create",
    possession: "any",
  })
  async createHelpLink(
    @graphql.Args() args: CreateHelpLinkArgs
  ): Promise<HelpLink> {
    return await this.service.createHelpLink({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HelpLink)
  @nestAccessControl.UseRoles({
    resource: "HelpLink",
    action: "update",
    possession: "any",
  })
  async updateHelpLink(
    @graphql.Args() args: UpdateHelpLinkArgs
  ): Promise<HelpLink | null> {
    try {
      return await this.service.updateHelpLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HelpLink)
  @nestAccessControl.UseRoles({
    resource: "HelpLink",
    action: "delete",
    possession: "any",
  })
  async deleteHelpLink(
    @graphql.Args() args: DeleteHelpLinkArgs
  ): Promise<HelpLink | null> {
    try {
      return await this.service.deleteHelpLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FormLink as PrismaFormLink } from "@prisma/client";

export class FormLinkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FormLinkCountArgs, "select">): Promise<number> {
    return this.prisma.formLink.count(args);
  }

  async formLinks<T extends Prisma.FormLinkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormLinkFindManyArgs>
  ): Promise<PrismaFormLink[]> {
    return this.prisma.formLink.findMany<Prisma.FormLinkFindManyArgs>(args);
  }
  async formLink<T extends Prisma.FormLinkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormLinkFindUniqueArgs>
  ): Promise<PrismaFormLink | null> {
    return this.prisma.formLink.findUnique(args);
  }
  async createFormLink<T extends Prisma.FormLinkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormLinkCreateArgs>
  ): Promise<PrismaFormLink> {
    return this.prisma.formLink.create<T>(args);
  }
  async updateFormLink<T extends Prisma.FormLinkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormLinkUpdateArgs>
  ): Promise<PrismaFormLink> {
    return this.prisma.formLink.update<T>(args);
  }
  async deleteFormLink<T extends Prisma.FormLinkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FormLinkDeleteArgs>
  ): Promise<PrismaFormLink> {
    return this.prisma.formLink.delete(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LeadFormSubmission as PrismaLeadFormSubmission,
  Practice as PrismaPractice,
} from "@prisma/client";

export class LeadFormSubmissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeadFormSubmissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leadFormSubmission.count(args);
  }

  async leadFormSubmissions<T extends Prisma.LeadFormSubmissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormSubmissionFindManyArgs>
  ): Promise<PrismaLeadFormSubmission[]> {
    return this.prisma.leadFormSubmission.findMany<Prisma.LeadFormSubmissionFindManyArgs>(
      args
    );
  }
  async leadFormSubmission<T extends Prisma.LeadFormSubmissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormSubmissionFindUniqueArgs>
  ): Promise<PrismaLeadFormSubmission | null> {
    return this.prisma.leadFormSubmission.findUnique(args);
  }
  async createLeadFormSubmission<T extends Prisma.LeadFormSubmissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormSubmissionCreateArgs>
  ): Promise<PrismaLeadFormSubmission> {
    return this.prisma.leadFormSubmission.create<T>(args);
  }
  async updateLeadFormSubmission<T extends Prisma.LeadFormSubmissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormSubmissionUpdateArgs>
  ): Promise<PrismaLeadFormSubmission> {
    return this.prisma.leadFormSubmission.update<T>(args);
  }
  async deleteLeadFormSubmission<T extends Prisma.LeadFormSubmissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadFormSubmissionDeleteArgs>
  ): Promise<PrismaLeadFormSubmission> {
    return this.prisma.leadFormSubmission.delete(args);
  }

  async getPracitice(parentId: string): Promise<PrismaPractice | null> {
    return this.prisma.leadFormSubmission
      .findUnique({
        where: { id: parentId },
      })
      .pracitice();
  }
}
